[{"path":"index.html","id":"git-and-github-for-public-health","chapter":"1 Git and GitHub for Public Health","heading":"1 Git and GitHub for Public Health","text":"website training “Git GitHub Public Health”,\nfirst offered 2024.","code":""},{"path":"index.html","id":"overview","chapter":"1 Git and GitHub for Public Health","heading":"1.1 Overview","text":"Keeping track changes statistical code key reducing errors boosting teamwork projects. However, many public health professionals, including epidemiologists, haven’t trained manage changes, might leave wondering integration institutional review board (IRB) protocols privacy rules. website, dive basics Git GitHub. ’re show tools can help confidently ethically manage code changes, making work research smoother secure.","code":""},{"path":"index.html","id":"contributors-and-acknowledgements","chapter":"1 Git and GitHub for Public Health","heading":"1.2 Contributors and Acknowledgements","text":"Corinne Riddell Lauren Wilner\ncreated website. Contact us c.riddell@berkeley.edu wilnerl@uw.edu \nquestions, comments, feedback.website references builds upon work Jenny Bryan, especially \nHappy Git GitHub useR website. \ninvaluable reference one referred numerous times creating\nwebsite.website hosted https://www.netlify.com.","code":""},{"path":"workshop-setup.html","id":"workshop-setup","chapter":"2 Workshop Setup","heading":"2 Workshop Setup","text":"pre-workshop guide designed walk initial setup Git\ncomputer.issues, please reach us c.riddell@berkeley.edu \nwilnerl@uw.edu.","code":""},{"path":"workshop-setup.html","id":"introduction","chapter":"2 Workshop Setup","heading":"2.1 Introduction","text":"Git version control system allows track changes code.order get setup, need install Git computer, make GitHub\naccount, configure Git computer.attending live workshop, cover details use\nGit workshop. ensure workshop runs smoothly efficiently,\nrequest complete following steps workshop – \nenables us spend workshop time using Git rather setup.\nThank !","code":""},{"path":"workshop-setup.html","id":"install-r-and-rstudio","chapter":"2 Workshop Setup","heading":"2.2 Install R and RStudio","text":"don’t already R RStudio please install . workshop\nalso give options using SAS, everyone needs R RStudio pieces\nworkshop – take minutes download install\n.Link downloads: https://posit.co/download/rstudio-desktop/downloads ago, recommend update \nversions everthing runs smoothly.","code":""},{"path":"workshop-setup.html","id":"open-rstudio-and-install-the-following-packages","chapter":"2 Workshop Setup","heading":"2.3 Open RStudio and install the following packages","text":"tidyverseusethisgitcredsbroomTo , run following code RStudio console (lower left-hand side\npanel, four panel pane):packages fail install, please let us know.first time using R/RStudio, video shows type \ncommands console R looks like installs runs smoothly.\nPlease view video full screen high quality see properly.","code":"\ninstall.packages('tidyverse')\ninstall.packages('usethis')\ninstall.packages('gitcreds')\ninstall.packages('broom')"},{"path":"workshop-setup.html","id":"create-a-github-account","chapter":"2 Workshop Setup","heading":"2.4 Create a GitHub account","text":"https://github.com/","code":""},{"path":"workshop-setup.html","id":"install-git","chapter":"2 Workshop Setup","heading":"2.5 Install Git","text":"Installing Git different depending whether using Windows Mac.\nFollow relevant instructions.","code":""},{"path":"workshop-setup.html","id":"windows-instructions","chapter":"2 Workshop Setup","heading":"2.5.1 Windows Instructions","text":"Download Git Windows: https://git-scm.com/download/win. download\nbegins, many menu items click . recommended \nfantastic website HappyGitWithR, accept\ndefault selections except item “Adjusting PATH environment”.\n, make sure select “Git command line also 3rd-party\nsoftware”. HappyGitWithR also notes\n“RStudio Windows prefers Git \ninstalled C:/Program Files appears default. \nimplies, example, Git executable Windows system found \nC:/Program Files/Git/bin/git.exe. Unless specific reasons otherwise,\nfollow convention.following video shows download install Git Windows. View \nfull screen high quality want follow along:Git downloads, confirm access Git Bash. ,\nappear Start menu: Start menu > Git > Git Bash.Git downloads, confirm access Git Bash. ,\nappear Start menu: Start menu > Git > Git Bash.RStudio automatically detect presence Git Bash. can inspect\ninfluence directly via Tools > Global Options > Terminal. Unless \ngood reason otherwise, want see “Git Bash” “New\nterminals open …” dropdown menu.RStudio automatically detect presence Git Bash. can inspect\ninfluence directly via Tools > Global Options > Terminal. Unless \ngood reason otherwise, want see “Git Bash” “New\nterminals open …” dropdown menu.next set tasks done RStudio outlined section\n“Configure Git using HTTPS token” Mac instructions.next set tasks done RStudio outlined section\n“Configure Git using HTTPS token” Mac instructions.","code":""},{"path":"workshop-setup.html","id":"mac-instructions","chapter":"2 Workshop Setup","heading":"2.5.2 Mac Instructions","text":"Open Terminal application, type git --version check Git \nalready installed. , see version number. , type:\ngit config press return. prompted install Git \nfollow prompts!","code":""},{"path":"workshop-setup.html","id":"configure-git-using-an-https-token","chapter":"2 Workshop Setup","heading":"2.6 Configure Git using an HTTPS token","text":"RStudio, load libraries usethis & gitcreds:Use function use_git_config() configure Git using HTTPS token. \n, type following RStudio Console (lower left panel), filling \nuser name, email. user name – doesn’t need \nGitHub user name. user.email email address linked GitHub\naccount.Next , need create personal access token. way \nauthenticate GitHub. need order push \npull GitHub repository. , run following R console:bring browser page. Put description token \nselect expiration date drop - please select expiration.\nScroll click Generate token button. Copy token \ngenerated paste somewhere able access .Go back R/RStudio run following:prompted, paste GitHub token copied website. \nadd credentials cache. following print RStudio\nconsole:","code":"\nlibrary(usethis)\nlibrary(gitcreds)\nuse_git_config(user.name = \"Your user name\",\n               user.email = \"your.email.adress@gmail.com\")\nusethis::create_github_token()  \ngitcreds::gitcreds_set()? Enter password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  \n-> Adding new credentials...\n-> Removing credentials from cache...\n-> Done."},{"path":"workshop-setup.html","id":"download-data-and-code-used-for-the-workshop","chapter":"2 Workshop Setup","heading":"2.7 Download data and code used for the workshop","text":"Run following two commands RStudio console:R ask want folder copied onto Desktop. Select Yes.R display messages showing folder downloaded unzipped.\nTell R whether delete file.RStudio launch.attending live workshop, keep folder handy – reference\n. following along asynchronously use folder \nsolo workflow section.like, feel free run code folder, otherwise\nedit time.","code":"\ninstall.packages(\"usethis\")\nusethis::use_course(\"corinne-riddell/existing-project\")"},{"path":"workshop-setup.html","id":"resources","chapter":"2 Workshop Setup","heading":"2.8 Resources","text":"now set use Git GitHub! issues, \nlinks can look help. still trouble, please\nreach us workshop.Happy Git RHappy Git RGit Setup BookGit Setup BookIf attending live workshop, cover rest website\nlive. See !","code":""},{"path":"why-git-and-github.html","id":"why-git-and-github","chapter":"3 Why Git and GitHub","heading":"3 Why Git and GitHub","text":"","code":""},{"path":"why-git-and-github.html","id":"what-is-version-control-git-and-github","chapter":"3 Why Git and GitHub","heading":"3.1 What is version control, Git, and Github?","text":"Version control practice tracking managing changes \n(statistical) code files.Git version control system. tracks changed file,\nsynchronizes changes central server multiple\ncontributors can manage changes set files (Wilson et al., 2017).GitHub hosting service web Git repositories.","code":""},{"path":"why-git-and-github.html","id":"the-case-for-version-control","chapter":"3 Why Git and GitHub","heading":"3.2 The case for version control","text":"Reduces ErrorsVersion control eliminates need send code outputs (graphics,\nreports) via email share folders collaborators. version\ncontrol system, everyone access recent set files.Facilitates reproducible analysesHave ever tried reproduce analysis 3 years ago? ever\ntried reproduce someone else’s analysis? ever found links\ndon’t work computer? access data?everyone access files, project’s workflow can set \nensures analyses reproducible everyone.R, can simple hitting “knit” button run analyses\nanyone’s computer – need update file pathways, need download\nnew versions code data.Eases supports supervision collaborationWith Github, can easily view changes made statistical code. \nworking together, easy tell lines code changed,\nalongside downstream changes reports data visualizations result \nchange analysis.Facilitates rollbacksYou can use Git roll back previous version file point. \nuseful team decides change made code beneficial\nwants revert back different strategy used previously.Supports expeditious sharing scientific approaches findingsAnything posted GitHub can shared widely organization \npublic.","code":""},{"path":"git-jargon.html","id":"git-jargon","chapter":"4 Git Jargon","heading":"4 Git Jargon","text":"diving using Git GitHub, need become immersed \njargon. Fortunately, Alice Bartlett, \nPrincipal Engineer Financial Times, made excellent set slides \nGit GitHub associated jargon. covers:repository, “repo”commithashcheckoutbranchmergeremoteclonepushpullIn live workshop, go Alice’s slides together. \ngoing training asynchronously, can flip Alice’s slides\n:Download slides ","code":""},{"path":"interacting-with-terminal-and-bash.html","id":"interacting-with-terminal-and-bash","chapter":"5 Interacting with Terminal and Bash","heading":"5 Interacting with Terminal and Bash","text":"two things cover dive Git Github. First,\nusing Mac’s Terminal Window’s Bash training. \nnever used applications , introduce , \nbecome familiar . Second, discuss good names files folders,\ngood names make good times interact Terminal Bash.","code":""},{"path":"interacting-with-terminal-and-bash.html","id":"a-terminal-window","chapter":"5 Interacting with Terminal and Bash","heading":"5.1 A Terminal window","text":"use Terminal Bash applications interact Git laptops.\nMac Terminal window. looks similar Windows Bash window.training, supply Git code type \nTerminal/Bash windows.input command hit Enter/return \nkeyboard, Terminal/Bash display output screen. Pay attention\noutput indicate command understood \ncomputer something went wrong. example, command\ngit branch, followed output printed screen:cheat sheet commands use website:cheat sheet commands don’t use helpful know integrate\nworkflow:","code":""},{"path":"naming-folders-and-files.html","id":"naming-folders-and-files","chapter":"6 Naming folders and files","heading":"6 Naming folders and files","text":"working Terminal/Bash, important use good folder \nfile names make life easier.1. Good names folders: spaces special charactersRecall name variable SAS R, variable name contain spaces unusual characters. best practice use spaces unusual characters folder file names, even though spaces permissible commonly used Windows Mac Users.may wonder problem spaces, anyway? \nspaces human-readable aren’t machine-friendly. refer \nfolder file using Git Terminal Bash, name without spaces much\neasier type (otherwise insert backslash space).\nSpaces also break auto-complete function Git users love. \nfrustrating.Good folder names files names use dashes underscores place spaces.\nexample “life-expectancy” great folder name project estimating\nlife expectancy, “pollution-ptb” great folder name project\nestimating causal effect air pollution preterm birth.2. Good names code files: numbered underscores dashesWhen running statistical analysis, underlying order across \ncode files (e.g., starting importing data, data cleaning, \nanalysis). Good code file names start number (padded 0)\norder files according order performed analysis. \nfollowed short (human machine readable) descriptor file\n. can also use underscore “_” delimit field, dashes “-” \nseparate words within field.example, file names “pollution-ptb” folder:files :machine readablehuman readableplay well default orderingFlip Jenny Bryan’s slide set deeper dive file naming:Download slides here3. happens bad names?issue frustration includes spaces file names really hits home \ninclude spaces names trying interacting GitHub add files\nmake commit – like pain frustration – can try home!example, suppose made R markdown file called “Data Visualization\nEvaluation Report.rmd”. screenshot , can see file \nmodified used git status command. issue occurs need\nadd file using git add {file_name}. typed git add Data Visualization Evaluation Report.rmd\nerror Git doesn’t know name continues \nspace word “Data”! Even worse, space breaks auto-complete\nfunctionality occurs press “tab” auto-complete file name\ntyping first letters.really add file need use escape character (backslash “\\”)\nspace name, shown git add command highlighted \nyellow. might sound like big deal\nhaven’t interacted Terminal/Bash much, can guarantee \nfrustration build crescendo time… save \npain using dashes underscores instead spaces!","code":""},{"path":"solo-workflow.html","id":"solo-workflow","chapter":"7 Solo Workflow","heading":"7 Solo Workflow","text":"","code":""},{"path":"solo-workflow.html","id":"outline-for-this-section","chapter":"7 Solo Workflow","heading":"7.1 Outline for this section","text":"discussed Git GitHub important, now set repository work example. first section, working repository alone. :Make new repository GitHubClone repository local machineWrite code repository locallyPush code repositoryMerge branch mainRepeat process code updatesRepeat process data updates","code":""},{"path":"solo-workflow.html","id":"set-up-a-project-that-you-want-to-track-with-git-and-github","chapter":"7 Solo Workflow","heading":"7.2 Set up a project that you want to track with Git and GitHub","text":"Let’s suppose project want start tracking using Git\nGithub. project, already working code, data,\nvisualizations already saved. made project .\none called “existing-project” Desktop. \n, go back Workshop Setup page run usethis::use_course(\"corinne-riddell/existing-project\") code begin section.existing-project folder contains existing code things might\nwant start tracking GitHub. next thing make folder \nGitHub store project.Make new repository GitHubGo github.com log . Click green “New” button make GitHub\nrepository. Type “life-expectancy” repository name.Write whatever want description. example, type “analysis life expectancy US”Select either make public private repository.Check box next Add README file. tells Git create file can describe project. now, can write sentence practice repository workshop.Choose .gitignore template: R. tells Git use defaults work well R users.Keep license None. (want license developing code software, like R package, every day analysis code).Click “Create repository”. Github bring repository’s\nmain page.Clone repository local machineFrom main page repository click green Code button.’ll see URL starts https://. Push icon two overlapping\nsquares copy URL clipboard.Open Terminal (Mac) Bash (Windows) program. Navigate want place\nrepository using cd {folder_name} command. Note: Whenever use curly brackets website, need type curly brackets code. example use cd Documents/ navigate Documents folder, cd {Documents}. applies wherever see curly brackets website!type git clone {paste url copied } Terminal/Bash \npress return/enter button. following display Terminal/Bash\nsuccessful:now ready begin tracking changes folder using Git GitHub.Get oriented new directoryTo get oriented, following Terminal/Bash window:Navigate repository typing cd life-expectancy/.Type git status. results shows changes made yet:Type git branch. shows currently main branch.","code":"Biostat-MBP13-20:repos corinneriddell$ git clone https://github.com/corinne-riddell/life-expectancy.git\n\nCloning into 'life-expectancy'...\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (5/5), done.\nremote: Total 5 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (5/5), done.Biostat-MBP13-20:life-expectancy corinneriddell$git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nnothing to commit, working tree cleanBiostat-MBP13-20:life-expectancy corinneriddell$git branch\n* main"},{"path":"solo-workflow.html","id":"make-your-first-branch","chapter":"7 Solo Workflow","heading":"7.3 Make your first branch","text":"Set new branch main. Terminal/Bash:Type git checkout -b june18-xy, replacing xy initials – write \nlowercase prevent errors later! (today May 3, replace “june18”\ntoday’s date.)Type git branch, confirm indeed switched \nnew branch.Make changes tracked folderOkay, now set track changes. Let’s following:Copy code/, data/, images/ sub-folders “existing-project” folder \n“life-expectancy” folder well .Rproj file.Commit changes made push GitHubGo back Terminal Bash. Type git status. output tell \nchanged. tells us untracked files:want track code/, data/, images/ subfolders just copied , well existing-project.Rproj file.Use git add add newly-added files tracked. use git status confirm added everything want track:Note: Computers create files don’t want track. example, Macs create\n.DS_Store files. Another example Windows creates temporary files Word\ndoc Excel spreadsheet open. see weird files listed \nUntracked files list. don’t need worry don’t want\ntrack changes files.Commit changes locally: git commit -m 'commit message', replace\n‘commit message’ short message ’ve done (keep \nquotes around message). example, message something like\ngit commit -m \"added first set files\".Push changes GitHub: git push origin {branch-name}, replacing\n{branch-name} name branch. don’t remember branch’s\nname, type git branch print screen git push command.successfully pushed changes GitHub!Merge changes branch mainNavigate GitHub.com repository’s URL. pale yellow\nbanner informing changes just pushed. Click button\n“Compare & pull request”. Notice title commit message \nprevious step. Scroll . Look files added:code shown green, indicating every line code new.csv data file added rendered large.png file displayed.merge changes main:Click green “Create pull request” button. Github check \nable merge branch main without problems. Note message “\nbranch conflicts base branch”. means good go!Click green “Merge pull request” button.Click green “Confirm merge” button.Click “Delete branch” button.SummaryYou set folder laptop Git used track changes made\nlocally laptop.linked folder GitHub.com changes can tracked\nexternally GitHub.compared changes made locally branch main branch \nGitHub pulled changes main. means main branch \nupdated changes GitHub.","code":"Biostat-MBP13-20:life-expectancy corinneriddell$ git checkout -b june18-cr\nSwitched to a new branch 'june18-cr'Biostat-MBP13-20:life-expectancy corinneriddell$ git branch\n  main\n* june18-crBiostat-MBP13-20:life-expectancy corinneriddell$ git status\nOn branch june18-cr\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n    .DS_Store\n    code/\n    data/\n    images/\n    existing-project.RprojBiostat-MBP13-20:life-expectancy corinneriddell$ git add code/\nBiostat-MBP13-20:life-expectancy corinneriddell$ git add data/\nBiostat-MBP13-20:life-expectancy corinneriddell$ git add images/\nBiostat-MBP13-20:life-expectancy corinneriddell$ git add existing-project.Rproj \nBiostat-MBP13-20:life-expectancy corinneriddell$ git status\nOn branch june18-cr\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n    new file:   code/01_Analyze-life-expectancy.R\n    new file:   data/Life-expectancy-by-state-long.csv\n    new file:   images/ca-black-women-LE.png\n    new file:   images/placeholder.md\n    new file:   existing-project.Rproj\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n    .DS_StoreBiostat-MBP13-20:life-expectancy corinneriddell$ git commit -m \"added first set of files\"\n[june18-cr 58fcc58] added first set of files\n5 files changed, 7253 insertions(+)\ncreate mode 100644 code/01_Analyze-life-expectancy.R\ncreate mode 100644 data/Life-expectancy-by-state-long.csv\ncreate mode 100644 images/ca-black-women-LE.png\ncreate mode 100644 images/placeholder.md\ncreate mode 100644 existing-project.RprojBiostat-MBP13-20:life-expectancy corinneriddell$ git push origin june18-cr\nEnumerating objects: 11, done.\nCounting objects: 100% (11/11), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (9/9), done.\nWriting objects: 100% (10/10), 136.50 KiB | 10.50 MiB/s, done.\nTotal 10 (delta 0), reused 0 (delta 0)\nremote: \nremote: Create a pull request for 'june18-cr' on GitHub by visiting:\nremote:      https://github.com/corinne-riddell/life-expectancy/pull/new/june18-cr\nremote: \nTo https://github.com/corinne-riddell/life-expectancy.git\n * [new branch]      june18-cr -> june18-cr\n"},{"path":"solo-workflow.html","id":"moving-forward-more-practice-with-branching","chapter":"7 Solo Workflow","heading":"7.4 Moving forward: More practice with branching","text":"Now suppose days gone ready work analysis\nproject. particular, want update code affect \nresults “outputs”, outputs results saved form. \nsection, outline process follow want implement \nset tracked changes.Get setup new day workThe first thing need make sure good place git \nGitHub:Open Bash Terminal navigate life-expectancy folder using\ncd command.Check branch currently using git branch. local branch\nnames displayed. asterisk next branch currently .Check forgot save anything last time using git status.\nIdeally, saved changes nothing add/track/commit.\nstatus:one untracked file: .DS_Store. okay since internal\nfile used Mac OS never tracked. just want ensure\ncode files outputs intended track forgotten.likely still branch last day. case, navigate\nback main using git checkout main.want double check, type git branch confirm \nmain.can also delete “june18-XY” branch since longer need track \nlocally:Pull changes mainThis local copy main. needs pull changes \nmain made GitHub earlier step. , type git pull origin main.\ngraphic drawn summarizes files updated \nmuch.Start new branchLike last day, start new branch track today’s changes. Let’s\npretend now May 7. Type git checkout -b june21-XY, XY replaced\ninitials. Type git branch confirm changed branches.now ready make changes!Think like advance. particular, suppose \nwant :make table summarizes mean life expectancy race \ngender state ,save table CSV file data folder., re-launch RStudio double-clicking .Rproj file file viewer\nwindow. Navigate code file 01_Analyze-life-expectancy.R insert \nfollowing R code (working R) SAS code (working SAS) make save table:Track changes using GitRe-run previous R code (highlight previous code hit\ncommand + Return [Mac] control + Enter [Windows]). run newly-added\ncode line line see . Don’t forget save updated\n.R file pushing save icon! , track changes using Git.\nGo Bash/Terminal window. Type git status.\nfiles modified? files new untracked?Add new modified filesUse git add add specific files modified created.\nAdd one one. Use git status check changed files\ntracked. satisfied, commit changes locally.Commit changes locallyHelpful hint: Terminal/Bash plays well autocomplete. example, \ntyping pathway .R file “code/…” can push tab button\ntyping name autocomplete. makes selecting \nspecific files commit much easier.git commit -m '{message}'\nReplace ‘message’ short message describing changes. Remember keep quotes around message!Push changes GitHubYou now ready push changes GitHub onto GitHub’s version\nlocal branch. First, remind branch’s name using\ngit branch. push: git push origin {-BRANCH-NAME}, replacing\n{-BRANCH-NAME} name branch.Create pull requestNavigate GitHub.com go steps described previously \ncreate pull request pull changes main.","code":"Biostat-MBP13-20:life-expectancy corinneriddell$ git branch\n  main\n* june18-crBiostat-MBP13-20:life-expectancy corinneriddell$ git status\nOn branch june18-cr\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)Biostat-MBP13-20:life-expectancy corinneriddell$ git checkout main\nSwitched to branch 'main'\nYour branch is up to date with 'origin/main'.Biostat-MBP13-20:life-expectancy corinneriddell$ git branch\n* main\n  june18-crBiostat-MBP13-20:github-training corinneriddell$ git branch -d june18-cr\nDeleted branch june18-cr (was 58fcc58).Biostat-MBP13-20:life-expectancy corinneriddell$ git pull origin main\nremote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1/1), done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (1/1), done.\nFrom https://github.com/corinne-riddell/life-expectancy\n * branch            main       -> FETCH_HEAD\n   884028e..5f81e34  main       -> origin/main\nUpdating 884028e..5f81e34\nFast-forward\n code/01_Analyze-life-expectancy.R      |   38 +\n data/Life-expectancy-by-state-long.csv | 7201 +++++++++++++++++++++++++++++++++\n images/ca-black-women-LE.png           |  Bin 0 -> 74550 bytes\n images/placeholder.md                  |    1 +\n existing-project.Rproj                  |   13 +\n 5 files changed, 7253 insertions(+)\n create mode 100644 code/01_Analyze-life-expectancy.R\n create mode 100644 data/Life-expectancy-by-state-long.csv\n create mode 100644 images/ca-black-women-LE.png\n create mode 100644 images/placeholder.md\n create mode 100644 existing-project.RprojBiostat-MBP13-20:life-expectancy corinneriddell$ git checkout -b june21-cr\nSwitched to a new branch 'june21-cr'\nBiostat-MBP13-20:life-expectancy corinneriddell$ git branch\n  main\n* june21-cr\n# R Code\n# Calculate the LE for each state, separately by race and gender:\nle_averages <- le_data %>% \n  group_by(state, race, sex) %>%\n  summarise(mean_LE = mean(LE)) \n\n# print the first 10 rows to the screen. By default, R rounds the numeric \n# information in the display to make it more compact \nle_averages\n# alternatively, type View(le_averages) in the Console to open up a Viewer \n# window, or click the table icon beside the le_averages objects in the \n# Environment pane (upper right hand panel of RStudio).\n\n#save this table as a CSV file in the data sub-folder\nwrite_csv(le_averages, \"./data/le_averages.csv\")/*SAS Code*/\n\n/*Calculate the LE for each state, separately by race and gender:*/\nproc sort data=le_data; by state race sex; run;\nproc means data=le_data; by state race sex; var le; output out=le_averages mean=mean_le ; run;\n\n/*Print the first 10 rows to the screen*/\nproc print data=le_averages (obs=10); run;\n/*Or you could just open the dataset to browse it.*/\n\n/*Export this file to a .csv file \n(if you use the following code, don't forget to replace YourFilePathHere with the appropriate file path!)*/\nPROC EXPORT DATA= WORK.LE_AVERAGES \n            OUTFILE= \"YourFilePathHere\\data\\le_averages.csv\" \n            DBMS=CSV REPLACE;\n     PUTNAMES=YES;\nRUN;Biostat-MBP13-20:life-expectancy corinneriddell$ git status\nOn branch june21-cr\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n    modified:   code/01_Analyze-life-expectancy.R\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n    .DS_Store\n    data/le_averages.csvBiostat-MBP13-20:life-expectancy corinneriddell$ git add code/01_Analyze-life-expectancy.R \nBiostat-MBP13-20:life-expectancy corinneriddell$ git add data/le_averages.csv \nBiostat-MBP13-20:life-expectancy corinneriddell$ git status\nOn branch june21-cr\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n    modified:   code/01_Analyze-life-expectancy.R\n    new file:   data/le_averages.csv\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n    .DS_StoreBiostat-MBP13-20:life-expectancy corinneriddell$ git commit -m 'calc LE averages' \n[june21-cr a7435b8] calc LE averages\n 2 files changed, 177 insertions(+), 1 deletion(-)\n create mode 100644 data/le_averages.csvBiostat-MBP13-20:life-expectancy corinneriddell$ git branch\n  main\n* june21-cr\nBiostat-MBP13-20:life-expectancy corinneriddell$ git push origin june21-cr\nEnumerating objects: 10, done.\nCounting objects: 100% (10/10), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (6/6), 2.84 KiB | 2.84 MiB/s, done.\nTotal 6 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nremote: \nremote: Create a pull request for 'june21-cr' on GitHub by visiting:\nremote:      https://github.com/corinne-riddell/life-expectancy/pull/new/june21-cr\nremote: \nTo https://github.com/corinne-riddell/life-expectancy.git\n * [new branch]      june21-cr -> june21-cr"},{"path":"solo-workflow.html","id":"another-practice-changes-after-receiving-an-updated-dataset","chapter":"7 Solo Workflow","heading":"7.5 Another practice: Changes after receiving an updated dataset","text":"Another week goes . now May 14. received email \nerror data file used conduct analysis. new data file\nsecurely transferred data holder. need rerun analysis\nusing new dataset. new data file one called “LEbsyrx.csv” \ndata folder.Get ready daySet work Git GitHub day:git branch: see branch :git status: confirm committed everything wanted commit:git checkout main: switch main branchgit branch -d june21-cr: delete old branch (change “cr” initials)git pull origin main: pull GitHub’s copy main branch update \nlocal version. Examine figure made Git changes:Checkout new branchgit checkout -b june25-xy, replacing xy initials.Update datasetUpdate CSV file “Life-expectancy--state-long.csv” new dataset.\nFirst, decide want archive older version dataset reason.\n, decide store archived version move .\narchived version stay GitHub moved GitHub – \nfile organization system. , copy dataset called\n“Life-expectancy--state-long.csv” existing-project/future-data\nsubfolder paste life-expectancy/data subfolder.Re-run code uses file. First open .Rproj file launch RStudio. , can highlight code hit “Run” button.Track changes using GitUse git status, git add..., git commit... track changes\nlocally. Use git push push changes GitHub.Using git status, can see data files modified, \nimage file plot. new untracked folder called data/archive/\nmoved archived dataset.use git add specify new things want track:use git status confirm everything tracked:Commit changes locallyThen commit changes:Push changes GitHubFinally push changes GitHub:Submit pull requestGo process start pull request. pull request page,\nscroll see “diffs” data image. Pay close attention \nfiles changed:use “2-” “swiper” “onion skin” tools see changes saved figure.\ndata changed? tool prefer?can see rows data affected change?can tell data images change affected analytic findings?anything else noticed?looking changes, go process merge pull request\nmain.","code":"Biostat-MBP13-20:life-expectancy corinneriddell$ git branch\n  main\n* june21-crBiostat-MBP13-20:life-expectancy corinneriddell$ git status\nOn branch june21-cr\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)Biostat-MBP13-20:life-expectancy corinneriddell$ git checkout main\nSwitched to branch 'main'\nYour branch is up to date with 'origin/main'.Biostat-MBP13-20:life-expectancy corinneriddell$ git pull origin main\nremote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1/1), done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (1/1), done.\nFrom https://github.com/corinne-riddell/life-expectancy\n * branch            main       -> FETCH_HEAD\n   5f81e34..e15298a  main       -> origin/main\nUpdating 5f81e34..e15298a\nFast-forward\n code/01_Analyze-life-expectancy.R |  17 ++++-\n data/le_averages.csv              | 161 +++++++++++++++++++++++++++++++++++++++\n 2 files changed, 177 insertions(+), 1 deletion(-)\n create mode 100644 data/le_averages.csvBiostat-MBP13-20:life-expectancy corinneriddell$ git checkout -b june25-cr\nSwitched to a new branch 'june25-cr'Biostat-MBP13-20:life-expectancy corinneriddell$ git status\nOn branch june25-cr\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n    modified:   data/Life-expectancy-by-state-long.csv\n    modified:   data/le_averages.csv\n    modified:   images/ca-black-women-LE.png\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n    .DS_Store\n    data/.DS_Store\n    data/archive/Biostat-MBP13-20:life-expectancy corinneriddell$ git add data/Life-expectancy-by-state-long.csv \nBiostat-MBP13-20:life-expectancy corinneriddell$ git add data/le_averages.csv \nBiostat-MBP13-20:life-expectancy corinneriddell$ git add images/ca-black-women-LE.png \nBiostat-MBP13-20:life-expectancy corinneriddell$ git add data/archive/Biostat-MBP13-20:life-expectancy corinneriddell$ git status\nOn branch june25-cr\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n    modified:   data/Life-expectancy-by-state-long.csv\n    new file:   data/archive/Life-expectancy-by-state-long_old.csv\n    modified:   data/le_averages.csv\n    modified:   images/ca-black-women-LE.png\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n    .DS_Store\n    data/.DS_StoreBiostat-MBP13-20:life-expectancy corinneriddell$ git commit -m 'data update and downstream changes'\n[june25-cr c4b02db] data update and downstream changes\n 4 files changed, 7570 insertions(+), 369 deletions(-)\n create mode 100644 data/archive/Life-expectancy-by-state-long_old.csv\n rewrite images/ca-black-women-LE.png (98%)git push origin june25-cr\nEnumerating objects: 14, done.\nCounting objects: 100% (14/14), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (8/8), done.\nWriting objects: 100% (8/8), 68.08 KiB | 9.73 MiB/s, done.\nTotal 8 (delta 3), reused 0 (delta 0)\nremote: Resolving deltas: 100% (3/3), completed with 3 local objects.\nTo https://github.com/corinne-riddell/life-expectancy.git\n   e15298a..c4b02db  june25-cr -> june25-cr\nBiostat-MBP13-20:life-expectancy corinneriddell$ \n"},{"path":"solo-workflow.html","id":"summary","chapter":"7 Solo Workflow","heading":"7.6 Summary","text":"Congratulations, successfully worked Git GitHub solo! \njourney. now know transition existing work tracked\nusing Git GitHub, track new changes using git add, git commit,\npush GitHub using git push origin {branch}. also learned\npull changes back main using git pull origin main, \ncreate, switch, delete branches.lot steps remember, week \nbecome easier. help get started, feel free use “Daily Git Practice”\nguide (linked left), provides handy guide covering \ncommands covered section.","code":""},{"path":"group-workflow.html","id":"group-workflow","chapter":"8 Group Workflow","heading":"8 Group Workflow","text":"","code":""},{"path":"group-workflow.html","id":"outline-for-this-section-1","chapter":"8 Group Workflow","heading":"8.1 Outline for this section","text":"previous section, got running working alone Git \nGitHub. section, ’re going learn collaborate others\nusing Git GitHub. :Set shared repositoryMake first commitCover three routes collaboration:\nIndependent Work\nCode Review\nWorking files\nPractice resolving merge conflict\n\nIndependent WorkCode ReviewWorking files\nPractice resolving merge conflict\nPractice resolving merge conflict","code":""},{"path":"group-workflow.html","id":"setup","chapter":"8 Group Workflow","heading":"8.2 Setup","text":"get section training, need training buddy.\nOne lead researcher, colleague.\nlead researcher create repository, colleague contribute .Lead Researcher: Create new repository GitHubGo GitHub, click “+” icon top-right corner, select New repository.Follow instructions solo workflow create new\nrepository (add README, choose license, etc.).Add colleague collaborator going \nSettings > Collaborators > Add people. Ask colleague \nGitHub username add repository.Colleague: Join repositoryCheck email invitation collaborate repository.Accept invitation clicking link email.: Clone repositoryGo main page repository clicking green Code button \ncopying URL. , Bash/Terminal navigate location \nclone repository run following command:","code":"git clone {repository URL}"},{"path":"group-workflow.html","id":"get-oriented-to-the-new-directory","chapter":"8 Group Workflow","heading":"8.3 Get oriented to the new directory","text":"Navigate repository typing cd {repo-name}Type git status. results shows changes made yet:Type git branch. shows currently main branch.: Create new branch. Now know repository cloned,\ndate, main, can make new branch work :Typing git branch show now new branch, though\nfirst line necessary create branch.","code":"Biostat-MBP13-20:collabo-repo corinneriddell$ git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nnothing to commit, working tree cleanBiostat-MBP13-20:life-expectancy corinneriddell$git branch\n* maingit checkout -b {new-branch-name}\ngit branch"},{"path":"group-workflow.html","id":"collaborative-routes","chapter":"8 Group Workflow","heading":"8.4 Collaborative Routes","text":"general, three ways work collaboratively project:Collaborative route #1 (Independent work): work separate files merge changes. similar creating several separate documents \nstoring shared folder view.Collaborative route #2 (Code review): Submit pull requests code reviews without direct edits. similar shared document can leave comments - like leave comments MS Word document colleague.Collaborative route #3 (Working files): work file merge changes. Sometimes leads merge conflicts additional care needed. similar shared document \ncan make changes directly colleague’s work – think working collaboratively document cloud individuals can edit \ndocument time, weird things might happen working sentence time.cover collaborative route .","code":""},{"path":"group-workflow.html","id":"collaborative-route-1-independent-work","chapter":"8 Group Workflow","heading":"8.4.1 Collaborative Route #1: Independent work","text":"work separate files merge changes. start, \nrepository two files, one made. general, \nmaintain several files, working specific files make\nsense never editing ’s files.Let’s practice workflow now:Lead researcher: Save code file brought workshop shared repository.Colleague: Save code file brought workshop shared repository. \nfile name lead researcher’s file, rename now.: Add, commit, push respective files GitHub:output push command looks successful, now ready create\npull request following process used solo workflow section.: Navigate GitHub.com repository’s URL. pale yellow\nbanner informing changes just pushed. Click button\n“Compare & pull request”. Notice title commit message \nprevious step. Scroll . Look files added.code shown green, indicating every line code new.Merge changes branch mainClick green “Create pull request” button. Github check \nable merge branch main without problems. Note message “\nbranch conflicts base branch”. means good go!Click green “Merge pull request” button.Click green “Confirm merge” button.Click “Delete branch” button.files merged main branch. Let’s take look. Go\nmain Code page take look code main (\nexisting branch repository). see files \ncreated previous steps.RecapYou now successfully completed first collaborative route. \ncreated file, committed , merged main branch. worked \ndifferent files merge conflicts interaction, now access\n’s work!now successfully completed first collaborative route. \ncreated file, committed , merged main branch. worked \ndifferent files merge conflicts interaction, now access\n’s work!workflow, continue working independently file \nshared repo add files go along.workflow, continue working independently file \nshared repo add files go along.❗ Take care: Now working together, sure\nuse git pull origin main frequently grab changes colleague made \nrepository. already, even important\nworking together can stay date whatever changes\nmade repository.❗ Take care: Now working together, sure\nuse git pull origin main frequently grab changes colleague made \nrepository. already, even important\nworking together can stay date whatever changes\nmade repository.","code":"git add {file-name}\ngit commit -m \"Initial commit with {file-name}\"\ngit push origin {new-branch-name}"},{"path":"group-workflow.html","id":"collaborative-route-2-code-review","chapter":"8 Group Workflow","heading":"8.4.2 Collaborative Route #2: Code Review","text":"Collaborative Route #2, lead researcher make new file, make\nchanges file push GitHub. colleague review\nchanges submitting comments pull request.Let’s practice workflow now:Everyone:Checkout main, pull changesLead researcher steps:Create new branch. Pretend next day include date \nbranch name alongside initials:Make save change file added previous step.\ncan add comment new line code - something small good. Save\nfile.Add, commit, push changes branch GitHub:Go GitHub repository page. see notification \nrecent push. Click “Compare & pull request” next branch.❗ NEW STEP ALERT: Fill details pull\nrequest, explaining ’ve added changed .❗ NEW STEP ALERT: Add colleague \nreviewer. immediately merge time!Submit pull request.Colleague steps:pull request submitted, colleague receive email telling \nlead researcher requested review PR #{X}.Click View GitHub bring GitHub \nyellow box top.Click Add review yellow box. click Review changes green right corner.Leave comments pull request clicking plus signs next chunks\ncode. can leave multiple comments. feedback can include suggestions,\nquestions, general feedback code. Focus clarity, efficiency, \npotential errors might notice.’re finished commenting, click Finish review green top right.Submit comments. three review options:Let’s take moment talk briefly review options.Lead Researcher:Review comments made colleague. Make necessary changes code based feedback.Add, commit, push changes branch. automatically update pull request.Colleague:receive email saying lead researcher pushed one commit. point, colleague can click View GitHub verify changes sufficient.Review changes made lead researcher response comments. ’re satisfied updates, approve pull request.Lead Researcher:pull request approved, merge changes main branch.RecapYou successfully completed second collaborative route. used Git \nreview/check/comment colleague’s work without emailing\ncopying/pasting code back forth. lead researcher made changes \ncode based feedback, worked together finalize \npull request.successfully completed second collaborative route. used Git \nreview/check/comment colleague’s work without emailing\ncopying/pasting code back forth. lead researcher made changes \ncode based feedback, worked together finalize \npull request.Similar previous workflow, collaborators can work independently, \nrequest review ’s work.Similar previous workflow, collaborators can work independently, \nrequest review ’s work.","code":"git checkout main\ngit pull origin main\ngit statusgit checkout -b {new-branch-name}\ngit branchgit status\ngit add {file-name}\ngit commit -m \"{your description of what you changed}\"\ngit push origin {your-branch-name}"},{"path":"group-workflow.html","id":"collaborative-route-3-working-on-the-same-files","chapter":"8 Group Workflow","heading":"8.4.3 Collaborative Route #3: Working on the same files","text":"scenario, imagine lead researcher already created \ncommitted analysis file. colleague wants make direct changes \nfile extend analysis. commonly used workflow,\nworks well people working sequentially pulling main\noften pull changes made repo collaborators work.diagram shows Lauren Corinne can work file,\nsequentially time, pulling main, making changes, merging \nchanges back main person works:However, collaborative route leaves room dreaded merge conflict.Merge conflicts can source stress many GitHub users. can\nscary, good company first merge conflict –\neveryone merge conflict eventually.merge conflict, might ask, happen? Well, merge\nconflict can happen colleague pull main \ntime proceed edit location file. colleague #1\nmerges changes main, colleague #2\ngoes merge changes main, GitHub doesn’t know changes keep.seems little convoluted, lucky day. set stage\nmerge conflict practice resolving buddy.Creating merge conflictEveryone:\n- Checkout pull changes: git checkout main git pull origin main make sure date.\n- Make checkout new branch: git checkout -b {new-branch-name}. \ncall branch something different researcher.\n- Together, choose one file one line location file \nedit separately laptops.\n- make edits agreed upon single line location decided edit. make different changes. Save code file.Lead researcher : add, commit, push changes branch.\n, create pull request merge changes main.Colleague: turn. Add, commit, push changes branch.\n, create pull request. 😨 Merge conflict! \nable merge main.Deep breaths. Let’s walk resolve merge conflict.colleague conflict see following. Colleague, follow steps!\nLead researcher, watch colleague’s screen follow along:Click View Pull Request begin resolving merge conflict. click View Pull Request, see following:Click Resolve conflicts begin resolving merge conflict. click Resolve conflicts, see following:Together, look code file. Decide edits keep. \nexercise, arbitrary edits keep. However, practice \nmake decision informed way.choose keep, delete >>> === <<< lines, \nwell lines person whose code keeping. \nfinished, click Mark resolved top right corner. Now \nclicked Mark resolved, see green check mark next file\nname, say Resolved top right corner. also \ngreen button top right corner says Commit merge. Click \nbutton. brings back page familiar , can\nmerge main. Click Merge pull request Confirm merge. can\ndelete branch usually .Everyone:\ncan checkout main pull changes. now see file merge conflict cleaned see code accepted !RecapYou just resolved first merge conflict!route worked together files. edited different\nsections file, successfully merge changes main.\ninstance, edited line code, created \nmerge conflict. resolve merge conflict.minimize change merge conflicts, make sure git pull origin main \nstart day’s work pull recent version repo. \nget conflict, know resolve . need make decision \nversion code keep. clear based hope \naccomplish analysis.","code":""},{"path":"what-to-track-on-git-and-github.html","id":"what-to-track-on-git-and-github","chapter":"9 What to track on Git and Github?","heading":"9 What to track on Git and Github?","text":"","code":""},{"path":"what-to-track-on-git-and-github.html","id":"approach-1-track-statistical-code-only","chapter":"9 What to track on Git and Github?","heading":"9.1 Approach 1 : Track statistical code only","text":"people use Git Github track changes statistical code .\n, tracking code files R (.R .Rmd), \nSAS (.SAS), corresponding files whichever language use.add types files .gitignore file Git\nwon’t track accidentally push GitHub. approach,\nuntracked files include: data files, word documents, PDFs, image files, etc –\nanything else storing looking folder tracked git \nwant pushed GitHub.approach closely corresponds GitHub used software\ndevelopers/code writers, used researchers research\nteams depending objectives.","code":""},{"path":"what-to-track-on-git-and-github.html","id":"approach-2-track-statistical-code-some-data-files-images-and-other-documents","chapter":"9 What to track on Git and Github?","heading":"9.2 Approach 2: Track statistical code, some data files, images, and other documents","text":"people use Git Github track variety files including code,\ndata files, well images documents. approach\noften used advocates reproducible research, give outsiders \nfuller picture entire research project.Sometimes, can post data, unrestricted large. \ncase, can set GitHub data visualizations\nwell completed report can reproduced someone affliated\nproject.many research public health settings, able share data.\ncase, can still share aspects project wider\ncommunity.","code":""},{"path":"what-to-track-on-git-and-github.html","id":"data-files-dos-and-donts","chapter":"9 What to track on Git and Github?","heading":"9.2.1 Data files do’s and dont’s","text":"❌ Don’t track restricted data!Restricted data posted GitHub. best practice store \nsecurely outside tracked folder ensure chance \nposted.❌ Don’t track large datasets!Git warn file exceeds 50 MB \nblock tracking files 100 MB larger. ensure files aren’t tracked, can store elsewhere (outside \ntracked Git folder), store tracked folder also listing file type .gitignore file.❌ WARNING MAC USERS: CIRCUMSTANCES TRACK .DS_STORE files!Mac user, may even know .DS_STORE file . \ninvisible files created whenever view folder using Finder. \nsee write git status. want track files\ncan allow people hack computer!! best practice, add \n.gitignore file ensure never tracked anyone\nelse contributing project.🤔 Consider tracking intermediate data productsGenerally, also doesn’t often make sense track large “raw” data file – big useful track changes file. may helpful track “intermediate data products”, files restricted. Intermediate data products might include aggregated datasets either reported directly used analysis. example, may access restricted dataset, data may become non-restricted aggregate level census tract. benefit tracking smaller dataset raw data updated, can easily see updates affect intermediate data products track . case need ensure reporting private/restricted data (eg cell counts 10 restricted often imposed aggregated tables, reporting identifying features protected health information anything else allow anyone access identify\nindividuals.✅ track plain text data files (e.g., csv txt files) best tracking render nicely GitHub, can\neasily view differences files submit pull request. \nalso track things like Excel files can’t easily view \nGitHub, benefits using GitHub apply files.","code":""},{"path":"what-to-track-on-git-and-github.html","id":"images-dos-and-donts","chapter":"9 What to track on Git and Github?","heading":"9.2.2 Images dos and dont’s","text":"can also track image files (e.g., png, jpeg), plots/figures\ncreate report. benefit tracking figures use \nimage comparison tools\nGitHub see image pre/post change \nanalysis. can super helpful modified something \nanalysis already written results. track image,\ncan easily see changed (point estimates confidence\nintervals, slope regression line, shading colored map).\ndirect pay-making much easier revise written\nresult.2-comparison:Swipe comparison:Onion skin comparison:❌ Dont’ track large image filesOne thing careful uploading large images like \nones generated GIS analyses (large maps). aren’t sure \ntrack image file, take look file size. (look \nrepositories epidemiologic analyses – images < 1000 kb.\n1 MB 4 MB – maps images saved \nhigher resolutions.)","code":""},{"path":"what-to-track-on-git-and-github.html","id":"documents","chapter":"9 What to track on Git and Github?","heading":"9.2.3 Documents","text":"can also track reports manuscripts using GitHub. reports \nwritten plain text language (e.g., R markdown, LaTeX) render\nnicely GitHub , permit see “diffs” made document\npull request. Tracking pdfs permissible can’t easily see \n“diffs” updated. However, pdfs easily viewable GitHub.\nTracking docx files also permissible, can’t easily see “diffs”\neasily viewable GitHub (since require MS Word render\n).✅ track plain text reports like R markdown files\n🤔 Consider tracking PDFs (easily viewable GitHub)\n❌ Don’t track Word documents (view)","code":""},{"path":"what-to-track-on-git-and-github.html","id":"things-you-definitely-do-not-want-to-track","chapter":"9 What to track on Git and Github?","heading":"9.3 Things you definitely do not want to track","text":"❌ Anything private restricted never want \ninadvertently share.includes passwords, API keys might use extract data.example, API key access Census data. include \nAPI key GitHub repository. methods writing code still\naccess key personal computer without writing explicitly \ncode.","code":""},{"path":"daily-git-practice.html","id":"daily-git-practice","chapter":"10 Daily Git Practice","heading":"10 Daily Git Practice","text":"Use instructions day working repository good practice!Open Terminal (Mac) Bash (Windows). Navigate repository using cd.get directory, type git branch remind \nbranch main branch previous work day.\nType git status ensure committed pushed everything last time\nused Git GitHub. nothing commit, go next step.\nfiles changes committed, need figure \nwant commit changes want discard . want \ndiscard , type git restore {file-name} discard changes file. \nfiles clean directory sure don’t\nwant track changes. want commit , follow steps 10 19\nproceeding Step 2.Type git checkout main.Type git pull origin main. pull changes made\nday get ready start clean branch today.Delete previous day’s branch. Type git branch -d {branch-name}.\nRemember replace {branch-name} previous day’s branch\nname. don’t remember named, type git branch display \nlist branches .Create checkout new branch typing git checkout -b {new-branch-name}.\nReplace {new-branch-name} new branch name. may something\nlike {-initials_date}.work. Try perform “work” discrete task can summarize\none commit message. , make multiple commits \none day.done, go back Terminal/Bash (already \nrepository directory) type git status see files modified\nstaged commit. may untracked files \ncreated also want track.Add newly added modified files staging area typing\ngit add {file-names}. can add files edited/created.Commit changes typing git commit -m \"{commit-message}\". Replace\n{commit-message} commit message (don’t forget keep quotes\naround message)!Remind branch’s name typing git branch. push \nchanges remote repository typing git push origin {new-branch-name}.\nReplace {new-branch-name} new branch name.browser, go repository GitHub.first time committed branch, \nyellow banner GitHub home page “pull request” button. , \ncan navigate Code tab, change branch, see code\njust worked ! now GitHub!Click Pull requests tab.Click green New pull request button.Click green Create pull request button.Click green Merge pull request button.Click green Confirm merge button.Delete branch GitHub prompted.now ready next day!","code":""},{"path":"assorted-git-processes-and-tips.html","id":"assorted-git-processes-and-tips","chapter":"11 Assorted Git processes and tips","heading":"11 Assorted Git processes and tips","text":"page introduces Git GitHub processes didn’t nicely fold chapters, think make useful ","code":""},{"path":"assorted-git-processes-and-tips.html","id":"forking","chapter":"11 Assorted Git processes and tips","heading":"11.1 Forking","text":"Remember went branching? Branching process creating new branch can make changes code separately main branch. finish changes, merge branch main delete branch. Branching critical tool working Git repositories ensuring main branch remains functional clean. Even merge branch back , owner repository can see branch GitHub, take look done, foster collaboration members repository.Branching:\nForking similar process, used want build someone else’s repository. fork repository, create copy repository GitHub account. can make changes repository account without affecting original repository. owner original repository member forked repository. forked repository essentially repository now. can think similar receiving Google folder, downloading contents, saving computer. original Google folder still , people ownership access original Google folder unaffected, now completely separate folder computer collaboration original Google folder team way.fork? Forking great way contribute open-source projects change repository don’t “write” access . Forking also circumvents reinventing wheel – perhaps colleagues developed suite functions cleaning malaria data, need similar functions dengue project. can fork repository, make changes tailor functions dengue, use functions project.Forking:\nForking core premise Git effort move towards open-source software development. allows collaboration within workplaces, disciplines, around world sharing code ideas.","code":""},{"path":"assorted-git-processes-and-tips.html","id":"ignoring-files","chapter":"11 Assorted Git processes and tips","heading":"11.2 Ignoring files","text":"working project, often files \nwant track Git. files, restricted datasets large\ndatasets, discussed “track Git GitHub” chapter.Decisions around data storage team decision may require input \ninformation technology department institutional review board. \npermitted according data’s level security, teams store \ndata Git private repository, teams use shared drives \ndata storage Git/GitHub code sharing, , finally, teams store\ndata Git repository push GitHub.last one – yes, can store files GitHub folder never\nchoose track . , use .gitignore file tell Git ignore\nfiles..gitignore file list files Git instructed track.\nWhenever add files repository, example, Git ignore \nfiles listed .gitignore file.’s example contents .gitignore file:.gitignore file instructs Git ignore files end .sql .sqlite, \nwell files build subfolder. Git ignore files handy \nworkflow store project’s files within Git\nrepository, since allows specify files ignore. Git ignore\nfiles less useful workflow\nwant everything repository pushed GitHub.","code":""},{"path":"assorted-git-processes-and-tips.html","id":"rolling-back-changes","chapter":"11 Assorted Git processes and tips","heading":"11.3 Rolling back changes","text":"Another advantages Git GitHub ability roll back changes.\nPerhaps committed iterations code realized \ncode wrote three commits ago , hindsight, best version. worries – can roll\nback commit start . great way experiment \ncode try new things without worrying losing work. , \ncan either use git checkout check previous commit, can use\ngit revert revert commit. process bit complicated, \ngreat walk .","code":""},{"path":"assorted-git-processes-and-tips.html","id":"and-if-all-else-fails","chapter":"11 Assorted Git processes and tips","heading":"11.4 And if all else fails…","text":"Remember Git tool can help track versions, examine changes,\ncollaborate others. get stuck, never forget okay \ndelete repository start - website’s co-author \ndone (repeatedly… even creating website).many comics memes Git struggles come – include acceptability burning repository starting !Remember alone struggles many resources available help . ALWAYS okay just save code elsewhere moment start .","code":""}]
